plugins {
	id 'org.springframework.boot' version '2.6.4'
	id 'io.spring.dependency-management' version '1.0.11.RELEASE'
	id 'org.asciidoctor.jvm.convert' version '3.3.2'
	id 'org.asciidoctor.jvm.pdf' version "3.3.2"
	id 'org.asciidoctor.jvm.gems' version "3.3.2"
	id 'java'
	id 'war'
	id 'jacoco'
}

group = 'com.optily'
version = '0.0.1-SNAPSHOT'


configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

ext {
	snippetsDir = file('build/generated-snippets')  as File
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.flywaydb:flyway-core'
	testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.2'
	testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.2'
    compileOnly 'org.projectlombok:lombok'
	runtimeOnly 'com.h2database:h2'
	annotationProcessor 'org.projectlombok:lombok'
	providedRuntime 'org.springframework.boot:spring-boot-starter-tomcat'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'


}

test {
	outputs.dir snippetsDir
	useJUnitPlatform()
	testLogging {
		events "passed", "skipped", "failed"
	}

	finalizedBy jacocoTestReport
}

jacoco {
	toolVersion = "0.8.7"
	reportsDirectory = file("$buildDir/customJacocoReportDir") as Directory
}


jacocoTestReport {
	dependsOn test // tests are required to run before generating the report

	reports {
		xml.required = false
		csv.required = false
		html.required = true
		html.outputLocation = file("${buildDir}/jacocoHtml" )
	}
}

jacocoTestCoverageVerification {
	violationRules {
		rule {
			limit {
				minimum = 0.9
			}
		}

		rule {
			enabled = true
			element = 'CLASS'
			includes = ['com.optily.campaign_optimisation.*']

			limit {
				counter = 'LINE'
				value = 'TOTALCOUNT'
				maximum = 0.9
			}
		}
	}
}


tasks.named('asciidoctor') {
	inputs.dir snippetsDir
	dependsOn test
}

war {
	enabled = true
	archiveClassifier = '' //use empty string
	duplicatesStrategy = DuplicatesStrategy.EXCLUDE
	manifest {

		attributes 'Main-Class': 'WEB-INF.classes.com.optily.campaign_optimisation.CampaignOptimisationApplication'
		attributes 'Implementation-Version':  archiveVersion
	}
	from {
		configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
	} {
		exclude "META-INF/*.SF"
		exclude "META-INF/*.DSA"
		exclude "META-INF/*.RSA"
	}
}


bootWar {
	dependsOn asciidoctor
	copy {
		from "${asciidoctor.outputDir}/html5"
		into 'src/main/resources/static/docs'
	}
}

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(17)
	}
}
