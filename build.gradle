plugins {
	id 'org.springframework.boot' version "${springBootVersion}"
	id 'io.spring.dependency-management' version "${springDependencyManagementVersion}"
	id 'org.asciidoctor.jvm.convert' version "${asciidoctorVersion}"
	id 'org.asciidoctor.jvm.pdf' version "${asciidoctorVersion}"
	id 'org.asciidoctor.jvm.gems' version "${asciidoctorVersion}"
	id("org.asciidoctor.base") version "${asciidoctorVersion}"
	id 'java'
	id 'war'
	id 'jacoco'
}

group = 'com.walshdanny700'
version = '0.0.1-SNAPSHOT'


configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
	asciidoctorExt
}

repositories {
	mavenCentral()
}

ext {
	snippetsDir = file('build/generated-snippets')
}

dependencies {

	// https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter-data-jpa
	implementation group: 'org.springframework.boot', name: 'spring-boot-starter-data-jpa', version: "${springBootStarterVersion}"
	// https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter-web
	implementation group: 'org.springframework.boot', name: 'spring-boot-starter-web', version: "${springBootStarterVersion}"

	// https://mvnrepository.com/artifact/org.flywaydb/flyway-core
	implementation group: 'org.flywaydb', name: 'flyway-core', version: "${flywayCoreVersion}"

	testImplementation group: "org.junit.jupiter", name : "junit-jupiter-api", version: "${jupiterVersion}"
	testRuntimeOnly group: "org.junit.jupiter", name :"junit-jupiter-engine", version: "${jupiterVersion}"

	// https://mvnrepository.com/artifact/org.projectlombok/lombok
	compileOnly group: 'org.projectlombok', name: 'lombok', version: "${lombokVersion}"
	annotationProcessor group: 'org.projectlombok', name: 'lombok', version: "${lombokVersion}"

    // https://mvnrepository.com/artifact/com.h2database/h2
	runtimeOnly group: 'com.h2database', name: 'h2', version: "${h2Version}"

	// https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter-tomcat
	providedRuntime group: 'org.springframework.boot', name: 'spring-boot-starter-tomcat', version: "${springBootStarterVersion}"
	// https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter-test
	testImplementation group: 'org.springframework.boot', name: 'spring-boot-starter-test', version: "${springBootStarterVersion}"

	//Rest Docs  https://mvnrepository.com/artifact/org.springframework.restdocs/spring-restdocs-mockmvc
	testImplementation group: "org.springframework.restdocs", name: "spring-restdocs-mockmvc", version: "${restdocsMockmvcVersion}"

	asciidoctorExt 'org.springframework.restdocs:spring-restdocs-asciidoctor'
}


test {

	useJUnitPlatform()
	testLogging {
		events "passed", "skipped", "failed"
	}

	finalizedBy jacocoTestReport

	outputs.dir snippetsDir
}

jacoco {
	toolVersion = "0.8.7"
	reportsDirectory = file("$buildDir/customJacocoReportDir") as Directory
}


jacocoTestReport {
	dependsOn test // tests are required to run before generating the report

	reports {
		xml.required = false
		csv.required = false
		html.required = true
		html.outputLocation = file("${buildDir}/jacocoHtml" )
	}
}

jacocoTestCoverageVerification {
	violationRules {
		rule {
			limit {
				minimum = 0.9
			}
		}

		rule {
			enabled = true
			element = 'CLASS'
			includes = ['com.walshdanny700.campaign_optimisation.*']

			limit {
				counter = 'LINE'
				value = 'TOTALCOUNT'
				maximum = 0.9
			}
		}
	}
}

asciidoctor {
	dependsOn test
	inputs.dir snippetsDir
	configurations 'asciidoctorExt'
}


war {
	enabled = true
	archiveClassifier = '' //use empty string
	duplicatesStrategy = DuplicatesStrategy.EXCLUDE
	manifest {

		attributes 'Main-Class': 'WEB-INF.classes.com.walshdanny700.campaign_optimisation.CampaignOptimisationApplication'
		attributes 'Implementation-Version':  archiveVersion
	}
	from {
		configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
	} {
		exclude "META-INF/*.SF"
		exclude "META-INF/*.DSA"
		exclude "META-INF/*.RSA"
	}
}

task copyRestDocs(type: Copy) {
	dependsOn asciidoctor
	from "${asciidoctor.outputDir}"
	into "static/docs"
}

bootRun {
	dependsOn copyRestDocs
}


bootJar {
	dependsOn copyRestDocs

}

bootWar {
	dependsOn copyRestDocs

}

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(17)
	}
}
