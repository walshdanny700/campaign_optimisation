#  Template Java Gradle build

#  This template allows you to test and build your Java project with Gradle.
#  The workflow allows running tests, code checkstyle and security scans on the default branch.

# Prerequisites: appropriate project structure should exist in the repository.

image: openjdk:17-alpine


pipelines:
  default:
#    - parallel:
    - step:
        name: Build and Test
        script:
          - docker login -u $DOCKER_HUB_REPO -p $DOCKER_PASSWORD
          - echo "Build and Test $DOCKER_HUB_REPO"
          - ./gradlew bootBuildImage --imageName=$DOCKER_HUB_REPO
        services:
          - docker
#      - step:
#          name: Lint the Dockerfile
#          image: hadolint/hadolint:latest-debian
#          script:
#            # Run a security scan for sensitive data.
#            # See more security tools at https://bitbucket.org/product/features/pipelines/integrations?&category=security
#            - hadolint Dockerfile
#  branches:
#    master:
#      - step:
#          name: Build and Test
#          script:
#            - IMAGE_NAME=$BITBUCKET_REPO_SLUG
#            - docker build . --file Dockerfile --tag ${IMAGE_NAME}
#            - docker save ${IMAGE_NAME} --output "${IMAGE_NAME}.tar"
#          services:
#            - docker
#          caches:
#            - docker
#          artifacts:
#            - "*.tar"
#      - step:
#          name: Deploy to Production
#          deployment: Production
#          script:
#            - echo ${DOCKER_PASSWORD} | docker login --username "$DOCKER_USER" --password-stdin
#            - IMAGE_NAME=$BITBUCKET_REPO_SLUG
#            - docker load --input "${IMAGE_NAME}.tar"
#            - VERSION="prod-0.1.${BITBUCKET_BUILD_NUMBER}"
#            - IMAGE=${DOCKERHUB_NAMESPACE}/${IMAGE_NAME}
#            - docker tag "${IMAGE_NAME}" "${IMAGE}:${VERSION}"
#            - docker push "${IMAGE}:${VERSION}"
#          services:
#            - docker